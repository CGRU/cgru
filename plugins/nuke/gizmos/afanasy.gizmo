Gizmo {
   tile_color 0x6e9048ff
   note_font_color 0x200ff

   addUserKnob { 20 ""        l General        }
   addUserKnob {  1 jobname   l "Job Name"     }
   addUserKnob { 26 "" l "" }
   addUserKnob {  3 framefirst      l "Frame First"      }
   addUserKnob {  3 framelast       l "Last"       -STARTLINE }
   addUserKnob {  3 frameinc        l "Increment"  -STARTLINE }
   addUserKnob { 32 "" l "Use Root Time Range" +STARTLINE T {
                  knob [node this].framefirst [knob root.first_frame]
                  knob [node this].framelast  [knob root.last_frame ]
      }
   }
   addUserKnob { 26 "" l "" }
   addUserKnob {  3 framespertask   l "Frames Per Task"  }
   addUserKnob {  3 framesequential l "Sequential" -STARTLINE }
   addUserKnob {  6 skipexisting    l "Skip Existing Files" +STARTLINE }
   addUserKnob { 26 "" l ""}
   addUserKnob { 22 knob_1 l RENDER T "cgru.render( nuke.toNode(\"this\"))"}
   addUserKnob {  6 startpaused     l "Start Paused" -STARTLINE }
   addUserKnob { 26 "" l ""}
   addUserKnob {  1 timecode        l "Time Code" }
   addUserKnob {  6 timecode_use    l "Use" -STARTLINE }
   addUserKnob { 22 timecode_get    l "Get" -STARTLINE T "cgru.setTimeCodeFromFrames( nuke.toNode(\"this\"))" }
   addUserKnob { 22 timecode_set    l "Set" -STARTLINE T "cgru.setFramesFromTimeCode( nuke.toNode(\"this\"))" }

   addUserKnob { 20 "" Parameters }
   addUserKnob {  4 platform M { "Any" "Native"}  l "Plafrorm" }
   addUserKnob {  3 maxruntasks     l "Max Running Tasks"      }
   addUserKnob {  3 priority        l "Priority"               }
   addUserKnob {  1 hostsmask       l "Hosts Mask"             }
   addUserKnob {  1 hostsmaskexcl   l "Exclude" -STARTLINE     }
   addUserKnob {  1 dependmask      l "Depend Mask"            }
   addUserKnob {  1 dependmaskglbl  l "Global" -STARTLINE      }
   addUserKnob {  3 capacity        l "Capacity"               }
   addUserKnob {  3 maxperhost      l "Max Tasks Per Host"     }
   addUserKnob {  3 maxruntime      l "Max Task Run Time (min)"}
   addUserKnob {  3 need_memory     l "Need RAM (GB)"          }
   addUserKnob {  7 need_gpu_mem    l "Need GPU RAM (GB)" R -1 32}

   addUserKnob { 20 "" MultiWrite }
   addUserKnob {  1 addnodes    l "Add Nodes"    }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 independent l "Connected nodes are independent" }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 reversedeps l "Reverse dependence on connected nodes" }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 fullrange   l "Wait whole frame range rendered" }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 forceframes l "Force frame range" }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 singlejob   l "Construct single job" }

   addUserKnob { 20 "" Advanced }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 tmpscene l "Create and render temporary scene file" }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 tickets_use  l "Tickets" }
   addUserKnob {  1 tickets_data l ""    }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 pools_use  l "Pools" }
   addUserKnob {  1 pools_data l "" }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 tmpimage l "Render to temporary image" }
   addUserKnob { 26 "" l "" }
   addUserKnob {  6 pathsmap l "Apply paths map to scene" }

   name afanasy

	jobname        ""
	framefirst      1
	framelast      11
	frameinc        1
	framespertask   1
	framespertask   1
	framesequential 1
	skipexisting    0
	startpaused     0
	timecode       ""
	timecode_use    1

	maxruntasks    -1
	priority       -1
	capacity       -1
	maxperhost     -1
	maxruntime     -1
	need_memory    -1
	need_gpu_mem   -1
	hostsmask      ""
	hostsmaskexcl  ""
	dependmask     ""
	dependmaskglbl ""

	addnodes       ""
	independent     0
	reversedeps     1
	fullrange       0
	forceframes     0
	singlejob       1

	tmpscene        1
	tickets_use     1
	tickets_data    NUKE:1,NET:100
	pools_use       0
	pools_data      farm:10,work:-10,comp:10,sim:-10
	tmpimage        1
	pathsmap        1

   help "Afanasy gizmo\n F10 create\n F11 render"
}

for { set i 0 } { $i < 100 } { incr i } {
   Input { }
}

Output { name Output1 }

end_group
